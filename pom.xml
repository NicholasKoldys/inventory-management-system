<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>dev.nicholaskoldys.inventorymanagementsystem</groupId>
    <artifactId>inventory-management-system</artifactId>
    <version>0.1</version>
    <packaging>jar</packaging>

    <name>Inventory Management System</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <project.modulename>inventorymanagementsystem</project.modulename>
        <project.mainclass>dev.nicholaskoldys.inventorymanagementsystem.InventoryManagementSystem</project.mainclass>

        <!-- * With Java11+ to use javafx an Main entry point into the application must not extend Application -->
        <project.shaded.mainclass>dev.nicholaskoldys.inventorymanagementsystem.ShadeMain</project.shaded.mainclass>

        <javafx.version>16</javafx.version>

        <maven.compiler.version>3.8.1</maven.compiler.version>
        <maven.compiler.release>15</maven.compiler.release>
        <!-- <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target> -->
        <!-- Instead of the mess "source/target" setting the release at 15 prevents issues -->
        

        <maven.shade.version>3.2.4</maven.shade.version>
        <javafx.maven.plugin.version>0.0.6</javafx.maven.plugin.version>
    </properties>

    <organization>
        <name>NicholasKoldys.dev</name>
    </organization>

    <!-- TODO - allows running of a jre8 -->
    <!-- <profile>
        <id>java-8-api</id>
        <activation>
            <jdk>[9,)</jdk>
        </activation>
        <properties>
            <maven.compiler.release>8</maven.compiler.release>
        </properties>
    </profile> -->

    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-base</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- TODO - enable to allow for cross-platform access -->
        <!-- <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics </artifactId>
            <version>11</version>
            <classifier>win</classifier>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics </artifactId>
            <version>11</version>
            <classifier>linux</classifier>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics </artifactId>
            <version>11</version>
            <classifier>mac</classifier>
        </dependency> -->
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.version}</version>
                <configuration>
                    <!--<source>${maven.compiler.source}</source>-->
                    <!--<target>${maven.compiler.target}</target>-->
                    <release>${maven.compiler.release}</release>
                </configuration>
            </plugin>

            <!-- * This Plugin is used to group the dependecies into a single jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven.shade.version}</version>
                <configuration>
                    <!-- Removes the "original" annotation and adds "shaded" towards the end of the jar -->
                    <!-- <shadedArtifactAttached>true</shadedArtifactAttached> -->
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                    <!-- TODO is this better? <finalName>${project.artifactId}-${project.version}+run</finalName> -->
                    <transformers>
                        <transformer implementation=
                        "org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <mainClass>${project.shaded.mainclass}</mainClass>
                        </transformer>
                    </transformers>
                    <filters>
                        <filter>
                            <!-- TODO - this seems unnecessary as it seems to be working with javafx libs -->
                            <!-- <artifact>*:*</artifact>
                            <excludes>
                                <exclude>module-info.class</exclude>
                                <exclude>META-INF/*.SF</exclude>
                                <exclude>META-INF/*.DSA</exclude>
                                <exclude>META-INF/*.RSA</exclude>
                            </excludes> -->
                        </filter>
                    </filters>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>${javafx.maven.plugin.version}</version>
                <configuration>
                    <!--<release>${maven.compiler.release}</release>-->
                    <jlinkImageName>inventorymanagementsystem</jlinkImageName>
                    <launcher>inventory Management System</launcher>
                    <!-- <mainClass>${project.modulename}/${project.mainclass}</mainClass>--><!-- <module-name>/<class-path> -->
                    <mainClass>${project.mainclass}</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>